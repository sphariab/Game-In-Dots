{"version":3,"sources":["components/ControlPanel/styles.js","components/ControlPanel/controlPanel.js","components/LeaderBoard/styles.js","components/LeaderBoard/leaderBoard.js","components/ScoreResult/styles.js","components/ScoreResult/scoreResult.js","containers/BoardBuilder/styles.js","containers/BoardBuilder/BoardBuilder.js","containers/BoardBuilder/cells.js","containers/Game/styles.js","containers/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["styles","theme","Input","width","marginRight","color","fontSize","backgroundColor","paddingLeft","borderRadius","height","content","PanelWrapper","display","flexDirection","margin","alignItems","background","Select","textAlign","Button","fontWeight","withStyles","props","classes","handleChangeMode","handleChangeName","settings","mode","name","handleStartGame","showWinner","startGame","handleRestartGame","className","FormControl","disabled","formControl","InputLabel","label","htmlFor","labelId","id","value","onChange","e","disableUnderline","optionName","Object","keys","map","key","MenuItem","createOption","onClick","resultContainer","padding","boxSizing","marginBottom","justifyContent","title","LeaderBoard","createTime","Date","getHours","getMinutes","getDate","toLocaleString","month","getFullYear","saveWinner","computerScore","userScore","data","winner","date","axios","post","then","response","setState","winners","state","prevProps","this","a","result","fetchData","item","Component","scoreWrapper","marginTop","boardWrapper","cell","border","minWidth","blue","green","red","field","cells","setCells","addUserScore","gridTemplateColumns","gridTemplateRows","i","containerStyle","style","number","handleSelectCell","Math","random","arr","push","_","index","selected","wrapper","fontFamily","mainContent","Game","counter","addCounter","addComputerScore","getRandomCell","diffArray","filter","floor","length","randomEl","setTimeout","delay","renderWinner","event","target","time","disablePlayButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.faf1395b.chunk.js","sourcesContent":["const styles = theme => ({\n  Input: {\n    width: 200,\n    marginRight: 15,\n    color: \"#7b8d93\",\n    fontSize: 14,\n    backgroundColor:'#d0d8dc',\n    paddingLeft: 10,\n    borderRadius: 4,\n    height: 40,\n    '&:before': {\n      content: \"none\"\n    }\n  },\n  PanelWrapper: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    margin: 50,\n    alignItems: \"baseline\",\n    '& div:focus':{\n      background: \"none\",\n    }\n  },\n  Select:{\n    width: 200,\n    textAlign: \"left\",\n    marginRight: 15,\n    color: \"#7b8d93\",\n    fontSize: 14,\n    borderRadius: 4,\n    height: 40,\n    paddingLeft: 10,\n    backgroundColor:'#d0d8dc',\n  },\n  Button:{\n    width: 150,\n    height: 40,\n    backgroundColor:'#7b8d93',\n    color: \"#fff\",\n    fontWeight: \"bold\",\n    fontSize: 14,\n    '&:hover':{\n      backgroundColor:'#d0d8dc',\n    }\n  },\n});\n\nexport default styles\n","import React from 'react';\nimport { Select, Input, Button, MenuItem, InputLabel, FormControl } from '@material-ui/core';\nimport styles from './styles';\nimport { withStyles } from '@material-ui/core/styles';\n\nfunction ControlPanel (props) {\n  const { classes, handleChangeMode, handleChangeName,\n    settings, mode, name,\n    handleStartGame, showWinner, startGame, handleRestartGame} = props;\n\n  const createOption = () => {\n    let optionName;\n\n    return Object.keys(settings).map(key => {\n      switch  (key) {\n        case ('easyMode'):\n          optionName = 'Easy Mode';\n          break;\n\n        case ('normalMode'):\n          optionName = 'Normal Mode';\n          break;\n\n        case ('hardMode'):\n          optionName = 'Hard Mode';\n          break;\n\n        default:\n          optionName = 'Pick Game Mode';\n      }\n      return (\n        <MenuItem key={key} value={key}>{optionName}</MenuItem>\n      )\n    })\n  };\n\n  return (\n    <>\n      <div className={classes.PanelWrapper}>\n        <FormControl disabled={startGame} className={classes.formControl}>\n          <InputLabel className={classes.label} htmlFor=\"simple\">Pick Game Mode</InputLabel>\n          <Select\n            className={classes.Select}\n            labelId=\"simple\"\n            id=\"simple\"\n            value={mode}\n            onChange={(e) => handleChangeMode(e)}\n            disabled={startGame}\n            disableUnderline={true}\n            label=\"Pick Game Mode\"\n          >\n            {createOption()}\n          </Select>\n        </FormControl>\n        <Input\n          className={classes.Input}\n          value={name}\n          onChange={(e) => handleChangeName(e)}\n          disableUnderline={true}\n        />\n        {!showWinner &&\n        <Button\n          className={classes.Button}\n          onClick={handleStartGame}\n          disabled={mode === 'Pick Game Mode' || startGame}\n        >\n          PLAY\n        </Button>}\n        {showWinner &&\n        <Button\n          className={classes.Button}\n          onClick={handleRestartGame}\n          disabled={mode === 'Pick Game Mode' || startGame}\n        >\n          PLAY AGAIN\n        </Button>}\n      </div>\n    </>\n  )\n};\n\nexport default withStyles(styles)(ControlPanel)","const styles = theme => ({\n  resultContainer:{\n    backgroundColor: \"#D0D8DC\",\n    height: 55,\n    width: 400,\n    padding: \"0px 5px 0px 20px\",\n    boxSizing: \"border-box\",\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: 4,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    color: \"#7b8d93;\",\n  },\n  title: {\n    color: \"#7b8d93\",\n  }\n});\n\nexport default styles\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport styles from './styles';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass LeaderBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      winners: []\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.showWinner !== prevProps.showWinner) {\n      this.saveWinner();\n    }\n  }\n\n  componentDidMount(){\n    const fetchData = async () => {\n      const result = await axios(\n        `https://starnavi-frontend-test-task.herokuapp.com/winners`,\n      );\n      this.setState({winners: result.data});\n    };\n    fetchData();\n  }\n\n  createTime = () =>{\n    let hours = new Date().getHours(),\n      minutes = new Date().getMinutes(),\n      day = new Date().getDate(),\n      month = new Date().toLocaleString(\"en-us\", { month: \"long\" }),\n      year = new Date().getFullYear();\n    return hours +':' + minutes + '; ' + day + ' ' + month + ' ' + year;\n\n  };\n\n  saveWinner = () => {\n    const {computerScore, userScore, name} = this.props;\n    let winner = computerScore > userScore ? 'Computer' : name;\n    let data = {\n      winner: winner,\n      date: this.createTime()\n    };\n\n    axios.post('https://starnavi-frontend-test-task.herokuapp.com/winners', data)\n      .then(response => {\n        this.setState({winners: response.data})\n      })\n  };\n\n  render () {\n    const {winners} = this.state;\n    const {classes} = this.props;\n      return (\n        <div>\n          <h1 className={classes.title}>Leader Board</h1>\n          {winners && winners.map(item =>\n            <div\n              className={classes.resultContainer}\n              key={item.id}\n            >\n              {item.winner}\n              <span>{item.date}</span>\n            </div>)}\n        </div>\n      )\n  }\n}\n\nexport default withStyles(styles)(LeaderBoard)","const styles = theme => ({\n  scoreWrapper: {\n    marginTop: 50,\n    fontSize: 14,\n    color: \"#7b8d93\",\n  },\n});\n\nexport default styles\n","import React from 'react';\nimport styles from './styles';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst scoreResult = ({userScore, computerScore, classes }) => {\n  return (\n    <div className={classes.scoreWrapper}>\n      <div>{`User: ${userScore}`}</div>\n      <div>{`Computer: ${computerScore}`}</div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(scoreResult)","const styles = theme => ({\n  boardWrapper: {\n    display: \"grid\"\n  },\n  cell: {\n    border: \"1px solid grey\",\n    width: 25,\n    height: 25,\n    padding: 0,\n    minWidth: 20,\n    borderRadius: 0,\n  },\n  blue:{\n    backgroundColor: \"#42d8e8\",\n  },\n  green:{\n    backgroundColor: \"#00e871\",\n  },\n  red:{\n    backgroundColor: \"#E85B5F\",\n  }\n});\n\nexport default styles\n","import React from 'react';\nimport styles from './styles';\nimport { Button } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst BoardBuilder = ({field, classes,  cells, setCells,  addUserScore}) => {\n  let gridTemplateColumns = '';\n  let gridTemplateRows = '';\n\n  for (let i = 0; i < field; i++) {\n    gridTemplateColumns = gridTemplateColumns + ' 25px';\n    gridTemplateRows = gridTemplateRows + ' 25px';\n  }\n\n  const containerStyle = {\n    width: 25*field + 'px',\n    gridTemplateColumns: gridTemplateColumns,\n    gridTemplateRows: gridTemplateRows\n  };\n\n  const handleSelectCell = (cell) => {\n    cells[cell.number]['color'] = 'green';\n    cells[cell.number]['selected'] = true;\n    setCells(cells);\n    addUserScore();\n  };\n\n  const getColor = (color) => {\n    if (color === 'green') {\n      return classes.green + ' ' + classes.cell\n    } else if (color === 'blue') {\n      return classes.blue + ' ' + classes.cell\n    } else if (color ===  'red') {\n      return classes.red + ' ' + classes.cell\n    } else if (color === 'none') {\n      return classes.cell\n    }\n  };\n\n  return(\n    <>\n      <div className={classes.boardWrapper}\n        style={ containerStyle }>\n        { cells && cells.map(cell=>(\n          <Button\n            onClick={() => handleSelectCell(cell)}\n            className={getColor(cell.color)}\n            key={Math.random()}\n            disabled={cell.disabled}\n          > </Button>\n        ))\n        }\n      </div>\n    </>\n  )\n};\n\nexport default withStyles(styles)(BoardBuilder)\n\n","let cells = (field) => {\n  let arr = []\n  for (let i = 0; i < field*field; i++) {\n    arr.push(i)\n  }\n  return cells = arr.map((_,index) => {\n    return {disabled: true, selected: false, number: index, color: 'none'}\n  })\n};\n\nexport default cells","const styles = theme => ({\n  wrapper: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    fontFamily: \"Open Sans, sans-serif\",\n  },\n  mainContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  }\n});\n\nexport default styles\n","import React, { Component } from 'react';\nimport ControlPanel from '../../components/ControlPanel/controlPanel';\nimport LeaderBoard from '../../components/LeaderBoard/leaderBoard';\nimport ScoreResult from '../../components/ScoreResult/scoreResult';\nimport BoardBuilder from '../BoardBuilder/BoardBuilder';\nimport axios from 'axios';\nimport cells from '../BoardBuilder/cells';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      settings: [],\n      mode:'Pick Game Mode',\n      name:'User Name',\n      field: 0,\n      delay: 0,\n      startGame: false,\n      cells: [],\n      counter: 0,\n      userScore: 0,\n      computerScore: 0,\n      showWinner: false,\n      time: 0\n    }\n  }\n\n  componentDidMount () {\n    const fetchData = async () => {\n      const result = await axios(\n        `https://starnavi-frontend-test-task.herokuapp.com/game-settings`,\n      );\n      this.setState({settings: result.data})\n    };\n    fetchData();\n  }\n\n  handleStartGame = () => {\n    this.setState({startGame: true});\n    this.startGame();\n  }\n\n  handleRestartGame = () => {\n    this.setState(\n      {\n        userScore: 0,\n        computerScore: 0,\n        showWinner: false,\n        startGame: true,\n        counter: 0,\n        cells: cells(this.state.field)\n      }, () => this.startGame())\n  }\n\n  addCounter = () => {\n    this.setState({counter: this.state.counter + 1});\n  };\n\n  addUserScore = () => {\n    this.setState({userScore: this.state.userScore + 10});\n    this.addCounter();\n  };\n\n  addComputerScore = () => {\n    this.setState({computerScore: this.state.computerScore + 10});\n    this.addCounter();\n  };\n\n  getRandomCell = () => {\n    let cells =  this.state.cells;\n    let diffArray = cells.filter(item => !item.selected);\n    return diffArray[Math.floor(Math.random() * diffArray.length)];\n  };\n\n  startGame = () => {\n    let field = this.state.field;\n    let counter = this.state.counter;\n    let cells =  this.state.cells;\n\n    if (counter < Math.floor(field*field / 2)) {\n      let randomEl = this.getRandomCell();\n      randomEl.disabled = false;\n      randomEl.color = \"blue\";\n      cells[randomEl.number] = randomEl;\n      this.setCells(cells);\n\n      setTimeout(() => {\n        if (randomEl.selected !== true){\n          randomEl.color = \"red\";\n          randomEl.selected = true;\n          randomEl.disabled = true;\n          cells[randomEl.number] = randomEl;\n          this.setCells(cells);\n          this.addComputerScore();\n        }\n        this.startGame()\n      }, this.state.delay)\n    } else {\n      this.setState({showWinner: true, startGame: false});\n    }\n  };\n\n  renderWinner = () => {\n    let winner;\n    if (this.state.computerScore > this.state.userScore) {\n      winner = <div>Computer wins!</div>;\n    } else {\n      winner = <div>{this.state.name } wins! </div>;\n    } return winner;\n  }\n\n  handleChangeMode = (event) => {\n    let settings = this.state.settings;\n    let field = settings[event.target.value]['field'];\n    this.setState({\n      cells: cells(field),\n      field: settings[event.target.value]['field'],\n      delay: settings[event.target.value]['delay'],\n      mode: event.target.value,\n    })\n  };\n\n  setCells = (cells) => {\n    this.setState({cells});\n  };\n\n  handleChangeName = (event) => {\n    this.setState({name: event.target.value});\n  };\n\n  render () {\n    const {\n      settings, field, delay, startGame, cells, name, mode, showWinner, disablePlayButton,\n      computerScore, userScore} = this.state;\n    const { classes } = this.props;\n    return (\n      <div className={classes.wrapper}>\n        <div className={classes.mainContent}>\n          <ControlPanel\n            settings={settings}\n            name={name}\n            mode={mode}\n            handleChangeMode={this.handleChangeMode}\n            handleChangeName={this.handleChangeName}\n            handleStartGame={this.handleStartGame}\n            handleRestartGame={this.handleRestartGame}\n            showWinner={showWinner}\n            startGame={startGame}\n            disablePlayButton={disablePlayButton}\n          />\n          <div>{showWinner ? this.renderWinner() : null}</div>\n          <BoardBuilder\n            field={field}\n            delay={delay}\n            startGame={startGame}\n            cells={cells}\n            setCells={this.setCells}\n            addUserScore={this.addUserScore}\n            />\n          <ScoreResult\n            computerScore={computerScore}\n            userScore={userScore}\n          />\n        </div>\n        <LeaderBoard\n          showWinner={showWinner}\n          name={name}\n          userScore={userScore}\n          computerScore={computerScore}\n          />\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(Game)\n","import React from 'react';\nimport Game from './containers/Game/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game>\n      </Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}